Elm.ReactNative = Elm.ReactNative || {};
Elm.ReactNative.ReactNative = Elm.ReactNative.ReactNative || {};
Elm.ReactNative.ReactNative.make = function (_elm) {
   "use strict";
   _elm.ReactNative = _elm.ReactNative || {};
   _elm.ReactNative.ReactNative = _elm.ReactNative.ReactNative || {};
   if (_elm.ReactNative.ReactNative.values) return _elm.ReactNative.ReactNative.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$ReactNative = Elm.Native.ReactNative.make(_elm),
   $ReactNative$Style = Elm.ReactNative.Style.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var maybeEncodeHandler = function (handler) {
      var _p0 = handler;
      if (_p0.ctor === "Just") {
            return A2($List._op["::"],{ctor: "_Tuple2",_0: _p0._0._0,_1: $Json$Encode.$int(_p0._0._1)},_U.list([]));
         } else {
            return _U.list([]);
         }
   };
   var encode = function (vtree) {
      var _p1 = vtree;
      switch (_p1.ctor)
      {case "VNode": return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: "tagName",_1: $Json$Encode.string(_p1._0)}
                                                        ,{ctor: "_Tuple2",_0: "style",_1: $ReactNative$Style.encode(_p1._1)}
                                                        ,{ctor: "_Tuple2",_0: "children",_1: $Json$Encode.list(A2($List.map,encode,_p1._2))}]));
         case "VText": return $Json$Encode.object(A2($Basics._op["++"],
           maybeEncodeHandler(_p1._1),
           _U.list([{ctor: "_Tuple2",_0: "tagName",_1: $Json$Encode.string("Text")}
                   ,{ctor: "_Tuple2",_0: "style",_1: $ReactNative$Style.encode(_p1._0)}
                   ,{ctor: "_Tuple2",_0: "children",_1: $Json$Encode.list(_U.list([$Json$Encode.string(_p1._2)]))}])));
         default: return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: "tagName",_1: $Json$Encode.string("Image")}
                                                     ,{ctor: "_Tuple2",_0: "style",_1: $ReactNative$Style.encode(_p1._0)}
                                                     ,{ctor: "_Tuple2",_0: "source",_1: $Json$Encode.string(_p1._1)}]));}
   };
   var on = F2(function (decoder,toMessage) {    return A2($Native$ReactNative.on,decoder,toMessage);});
   var onPress = F2(function (address,msg) {
      return {ctor: "_Tuple2",_0: "onPress",_1: A2(on,$Json$Decode.value,function (_p2) {    return A2($Signal.message,address,msg);})};
   });
   var VImage = F2(function (a,b) {    return {ctor: "VImage",_0: a,_1: b};});
   var image = F2(function (styles,source) {    return A2(VImage,styles,source);});
   var VText = F3(function (a,b,c) {    return {ctor: "VText",_0: a,_1: b,_2: c};});
   var text = F3(function (styles,handler,textContent) {    return A3(VText,styles,handler,textContent);});
   var VNode = F3(function (a,b,c) {    return {ctor: "VNode",_0: a,_1: b,_2: c};});
   var node = F3(function (tagName,styles,children) {    return A3(VNode,tagName,styles,children);});
   var view = F2(function (styles,children) {    return A3(VNode,"View",styles,children);});
   return _elm.ReactNative.ReactNative.values = {_op: _op,node: node,view: view,text: text,image: image,encode: encode,onPress: onPress};
};