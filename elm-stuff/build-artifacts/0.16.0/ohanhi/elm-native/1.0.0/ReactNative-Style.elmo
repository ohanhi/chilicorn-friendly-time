Elm.ReactNative = Elm.ReactNative || {};
Elm.ReactNative.Style = Elm.ReactNative.Style || {};
Elm.ReactNative.Style.make = function (_elm) {
   "use strict";
   _elm.ReactNative = _elm.ReactNative || {};
   _elm.ReactNative.Style = _elm.ReactNative.Style || {};
   if (_elm.ReactNative.Style.values) return _elm.ReactNative.Style.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var defaultTransform = {perspective: $Maybe.Nothing
                          ,rotate: $Maybe.Nothing
                          ,rotateX: $Maybe.Nothing
                          ,rotateY: $Maybe.Nothing
                          ,rotateZ: $Maybe.Nothing
                          ,scale: $Maybe.Nothing
                          ,scaleX: $Maybe.Nothing
                          ,scaleY: $Maybe.Nothing
                          ,translateX: $Maybe.Nothing
                          ,translateY: $Maybe.Nothing
                          ,skewX: $Maybe.Nothing
                          ,skewY: $Maybe.Nothing};
   var Transform = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return function (l) {
                                       return {perspective: a
                                              ,rotate: b
                                              ,rotateX: c
                                              ,rotateY: d
                                              ,rotateZ: e
                                              ,scale: f
                                              ,scaleX: g
                                              ,scaleY: h
                                              ,translateX: i
                                              ,translateY: j
                                              ,skewX: k
                                              ,skewY: l};
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var encodeValue = function (value) {
      var _p0 = value;
      switch (_p0.ctor)
      {case "NumberValue": return $Json$Encode.$float(_p0._0);
         case "StringValue": return $Json$Encode.string(_p0._0);
         case "ObjectValue": return $Json$Encode.object(A2($List.map,encodeDeclaration,_p0._0));
         default: return $Json$Encode.list(A2($List.map,encodeObject,A2($List.filterMap,$Basics.identity,_p0._0)));}
   };
   var encodeDeclaration = function (_p1) {    var _p2 = _p1;return {ctor: "_Tuple2",_0: _p2._0,_1: encodeValue(_p2._1)};};
   var encodeObject = function (_p3) {    var _p4 = _p3;return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: _p4._0,_1: encodeValue(_p4._1)}]));};
   var toJsonProperty = function (style) {
      var _p5 = style;
      switch (_p5.ctor)
      {case "StringStyle": return {ctor: "_Tuple2",_0: _p5._0._0,_1: encodeValue(_p5._0._1)};
         case "NumberStyle": return {ctor: "_Tuple2",_0: _p5._0._0,_1: encodeValue(_p5._0._1)};
         case "ObjectStyle": return {ctor: "_Tuple2",_0: _p5._0._0,_1: encodeValue(_p5._0._1)};
         default: return {ctor: "_Tuple2",_0: _p5._0._0,_1: encodeValue(_p5._0._1)};}
   };
   var encode = function (styles) {    return $Json$Encode.object(A2($List.map,toJsonProperty,styles));};
   var ListStyle = function (a) {    return {ctor: "ListStyle",_0: a};};
   var ObjectStyle = function (a) {    return {ctor: "ObjectStyle",_0: a};};
   var NumberStyle = function (a) {    return {ctor: "NumberStyle",_0: a};};
   var StringStyle = function (a) {    return {ctor: "StringStyle",_0: a};};
   var ListValue = function (a) {    return {ctor: "ListValue",_0: a};};
   var listDeclaration = F2(function (name,value) {    return {ctor: "_Tuple2",_0: name,_1: ListValue(value)};});
   var listStyle = F2(function (name,list) {    return ListStyle(A2(listDeclaration,name,list));});
   var ObjectValue = function (a) {    return {ctor: "ObjectValue",_0: a};};
   var objectDeclaration = F2(function (name,value) {    return {ctor: "_Tuple2",_0: name,_1: ObjectValue(value)};});
   var objectStyle = F2(function (name,list) {    return ObjectStyle(A2(objectDeclaration,name,list));});
   var NumberValue = function (a) {    return {ctor: "NumberValue",_0: a};};
   var numberDeclaration = F2(function (name,value) {    return {ctor: "_Tuple2",_0: name,_1: NumberValue(value)};});
   var numberStyle = F2(function (name,value) {    return NumberStyle(A2(numberDeclaration,name,value));});
   var fontSize = numberStyle("fontSize");
   var letterSpacing = numberStyle("letterSpacing");
   var lineHeight = numberStyle("lineHeight");
   var borderRadius = numberStyle("borderRadius");
   var borderTopLeftRadius = numberStyle("borderTopLeftRadius");
   var borderTopRightRadius = numberStyle("borderTopRightRadius");
   var borderBottomLeftRadius = numberStyle("borderBottomLeftRadius");
   var borderBottomRightRadius = numberStyle("borderBottomRightRadius");
   var borderWidth = numberStyle("borderWidth");
   var borderTopWidth = numberStyle("borderTopWidth");
   var borderRightWidth = numberStyle("borderRightWidth");
   var borderBottomWidth = numberStyle("borderBottomWidth");
   var borderLeftWidth = numberStyle("borderLeftWidth");
   var opacity = numberStyle("opacity");
   var shadowOpacity = numberStyle("shadowOpacity");
   var shadowRadius = numberStyle("shadowRadius");
   var bottom = numberStyle("bottom");
   var flex = numberStyle("flex");
   var height = numberStyle("height");
   var left = numberStyle("left");
   var margin = numberStyle("margin");
   var marginBottom = numberStyle("marginBottom");
   var marginHorizontal = numberStyle("marginHorizontal");
   var marginLeft = numberStyle("marginLeft");
   var marginRight = numberStyle("marginRight");
   var marginTop = numberStyle("marginTop");
   var marginVertical = numberStyle("marginVertical");
   var padding = numberStyle("padding");
   var paddingBottom = numberStyle("paddingBottom");
   var paddingHorizontal = numberStyle("paddingHorizontal");
   var paddingLeft = numberStyle("paddingLeft");
   var paddingRight = numberStyle("paddingRight");
   var paddingTop = numberStyle("paddingTop");
   var paddingVertical = numberStyle("paddingVertical");
   var right = numberStyle("right");
   var top = numberStyle("top");
   var width = numberStyle("width");
   var shadowOffset = F2(function (width,height) {
      return A2(objectStyle,"shadowOffset",_U.list([A2(numberDeclaration,"width",width),A2(numberDeclaration,"height",height)]));
   });
   var StringValue = function (a) {    return {ctor: "StringValue",_0: a};};
   var stringDeclaration = F2(function (name,value) {    return {ctor: "_Tuple2",_0: name,_1: StringValue(value)};});
   var stringStyle = F2(function (name,value) {    return StringStyle(A2(stringDeclaration,name,value));});
   var color = stringStyle("color");
   var fontFamily = stringStyle("fontFamily");
   var fontStyle = stringStyle("fontStyle");
   var fontWeight = stringStyle("fontWeight");
   var textAlign = stringStyle("textAlign");
   var textDecorationLine = stringStyle("textDecorationLine");
   var textDecorationStyle = stringStyle("textDecorationStyle");
   var textDecorationColor = stringStyle("textDecorationColor");
   var writingDirection = stringStyle("writingDirection");
   var backfaceVisibility = stringStyle("backfaceVisibility");
   var backgroundColor = stringStyle("backgroundColor");
   var borderColor = stringStyle("borderColor");
   var borderTopColor = stringStyle("borderTopColor");
   var borderRightColor = stringStyle("borderRightColor");
   var borderBottomColor = stringStyle("borderBottomColor");
   var borderLeftColor = stringStyle("borderLeftColor");
   var borderStyle = stringStyle("borderStyle");
   var overflow = stringStyle("overflow");
   var shadowColor = stringStyle("shadowColor");
   var resizeMode = stringStyle("resizeMode");
   var tintColor = stringStyle("tintColor");
   var alignItems = stringStyle("alignItems");
   var alignSelf = stringStyle("alignSelf");
   var flexDirection = stringStyle("flexDirection");
   var flexWrap = stringStyle("flexWrap");
   var justifyContent = stringStyle("justifyContent");
   var position = stringStyle("position");
   var transform = function (options) {
      return A2(listStyle,
      "transform",
      _U.list([A2($Maybe.map,numberDeclaration("perspective"),options.perspective)
              ,A2($Maybe.map,stringDeclaration("rotate"),options.rotate)
              ,A2($Maybe.map,stringDeclaration("rotateX"),options.rotateX)
              ,A2($Maybe.map,stringDeclaration("rotateY"),options.rotateY)
              ,A2($Maybe.map,stringDeclaration("rotateZ"),options.rotateZ)
              ,A2($Maybe.map,numberDeclaration("scale"),options.scale)
              ,A2($Maybe.map,numberDeclaration("scaleX"),options.scaleX)
              ,A2($Maybe.map,numberDeclaration("scaleY"),options.scaleY)
              ,A2($Maybe.map,numberDeclaration("translateX"),options.translateX)
              ,A2($Maybe.map,numberDeclaration("translateY"),options.translateY)
              ,A2($Maybe.map,stringDeclaration("skewX"),options.skewX)
              ,A2($Maybe.map,stringDeclaration("skewY"),options.skewY)]));
   };
   return _elm.ReactNative.Style.values = {_op: _op
                                          ,StringValue: StringValue
                                          ,NumberValue: NumberValue
                                          ,ObjectValue: ObjectValue
                                          ,ListValue: ListValue
                                          ,stringDeclaration: stringDeclaration
                                          ,numberDeclaration: numberDeclaration
                                          ,objectDeclaration: objectDeclaration
                                          ,listDeclaration: listDeclaration
                                          ,stringStyle: stringStyle
                                          ,numberStyle: numberStyle
                                          ,objectStyle: objectStyle
                                          ,listStyle: listStyle
                                          ,StringStyle: StringStyle
                                          ,NumberStyle: NumberStyle
                                          ,ObjectStyle: ObjectStyle
                                          ,ListStyle: ListStyle
                                          ,encodeValue: encodeValue
                                          ,encodeDeclaration: encodeDeclaration
                                          ,encodeObject: encodeObject
                                          ,toJsonProperty: toJsonProperty
                                          ,encode: encode
                                          ,color: color
                                          ,fontFamily: fontFamily
                                          ,fontSize: fontSize
                                          ,fontStyle: fontStyle
                                          ,fontWeight: fontWeight
                                          ,letterSpacing: letterSpacing
                                          ,lineHeight: lineHeight
                                          ,textAlign: textAlign
                                          ,textDecorationLine: textDecorationLine
                                          ,textDecorationStyle: textDecorationStyle
                                          ,textDecorationColor: textDecorationColor
                                          ,writingDirection: writingDirection
                                          ,backfaceVisibility: backfaceVisibility
                                          ,backgroundColor: backgroundColor
                                          ,borderColor: borderColor
                                          ,borderTopColor: borderTopColor
                                          ,borderRightColor: borderRightColor
                                          ,borderBottomColor: borderBottomColor
                                          ,borderLeftColor: borderLeftColor
                                          ,borderRadius: borderRadius
                                          ,borderTopLeftRadius: borderTopLeftRadius
                                          ,borderTopRightRadius: borderTopRightRadius
                                          ,borderBottomLeftRadius: borderBottomLeftRadius
                                          ,borderBottomRightRadius: borderBottomRightRadius
                                          ,borderStyle: borderStyle
                                          ,borderWidth: borderWidth
                                          ,borderTopWidth: borderTopWidth
                                          ,borderRightWidth: borderRightWidth
                                          ,borderBottomWidth: borderBottomWidth
                                          ,borderLeftWidth: borderLeftWidth
                                          ,opacity: opacity
                                          ,overflow: overflow
                                          ,shadowColor: shadowColor
                                          ,shadowOffset: shadowOffset
                                          ,shadowOpacity: shadowOpacity
                                          ,shadowRadius: shadowRadius
                                          ,resizeMode: resizeMode
                                          ,tintColor: tintColor
                                          ,alignItems: alignItems
                                          ,alignSelf: alignSelf
                                          ,bottom: bottom
                                          ,flex: flex
                                          ,flexDirection: flexDirection
                                          ,flexWrap: flexWrap
                                          ,height: height
                                          ,justifyContent: justifyContent
                                          ,left: left
                                          ,margin: margin
                                          ,marginBottom: marginBottom
                                          ,marginHorizontal: marginHorizontal
                                          ,marginLeft: marginLeft
                                          ,marginRight: marginRight
                                          ,marginTop: marginTop
                                          ,marginVertical: marginVertical
                                          ,padding: padding
                                          ,paddingBottom: paddingBottom
                                          ,paddingHorizontal: paddingHorizontal
                                          ,paddingLeft: paddingLeft
                                          ,paddingRight: paddingRight
                                          ,paddingTop: paddingTop
                                          ,paddingVertical: paddingVertical
                                          ,position: position
                                          ,right: right
                                          ,top: top
                                          ,width: width
                                          ,Transform: Transform
                                          ,defaultTransform: defaultTransform
                                          ,transform: transform};
};